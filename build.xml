<?xml version="1.0"?>
<project name="Neuro-Transmitter of a Joystick Control Normalization Algorithm and Program"
  default="targets" basedir="."      
        xmlns="antlib:org.apache.tools.ant"
	 xmlns:cpptasks="antlib:net.sf.antcontrib.cpptasks">       
   <property file="build.properties"/>
   <property environment="env"/>
   <property name="user" value="${env.USERNAME}"/>
   
    <target name="targets">
      <echo message="Targets are clean, build, static_test, dynamic_test, restoreUnix, restoreWin and targets. "/>
	  <echo message="  Note: Ant will need cpptasks jar in your system's ant/lib folder "/>
	  <echo message="		           (jar is included in the lib directory of this repository)."/> 
	  <echo message="	&#xa;Also, you will need a C compiler setup in your system or shell path "/>
	  <echo message="		           (need to be able to compile from the  command line)."/>
	  <echo message="   &#xa;To run this program, navigate to the dist directory and execute "/>
	  <echo message="					the executable: NeuroControlProgram after 'ant build' is called."/>
    </target>
    
	<!-- Checks if files need to be renamed, or if already done on previous build. -->
	<target name="checkUsbSerialFile">
		<available file="src/usbSerialCommNoWin.c" property="usbSerialUnmodified"/>
	</target>
	
    <!-- Only checks if checkUsbSerial File indicates it wasn't previously done based on filename. 
		 Therefore, this will only run once unless restoreWin or restoreUnix targets are ran. 
		 Checks which OS is installed on build system and calls targets depending on OS. -->
    <target name="checkOS" depends="checkUsbSerialFile" if="usbSerialUnmodified">
		<condition property="isUnix">
			<os family="unix" />
		</condition>
		<condition property="isWindows">
			<os family="windows" />			
		</condition>
		<antcall target="setUnix" />
		<antcall target="setWindows" />
	</target>   
	
	<!-- This is called if the OS is Unix, renames files to use Unix designated file for Serial Communication.
			It also changes a specific call that is windows only in userInput -->
	<target name="setUnix" if="isUnix">
		<echo message="Unix OS detected. Please make sure Arduino and a Neuro-Headset are connected and ready!"/>
		<move file="src/usbSerialCommWin.c" tofile="src/usbSerialCommWin.c.txt"/>
		<move file="src/usbSerialCommNoWin.c" tofile="src/usbSerialComm.c"/>
		<move file="src/userInputWin.c" tofile="src/userInputWin.c.txt"/>
		<move file="src/userInputNoWin.c" tofile="src/userInput.c"/>
	</target>
 
	<!-- This is called if the OS is Windows, renames files to use the Windows designated file for Serial Communication. -->			
	<target name="setWindows" if="isWindows">	
		<echo message="Windows OS detected. Please make sure the Arduino and the Emotiv Headset are connected and ready!"/>
		<move file="src/usbSerialCommWin.c" tofile="src/usbSerialComm.c"/>
		<move file="src/usbSerialCommNoWin.c" tofile="src/usbSerialCommNoWin.c.txt"/>
		<move file="src/userInputNoWin.c" tofile="src/userInputNoWin.c.txt"/>
		<move file="src/userInputWin.c" tofile="src/userInput.c"/>		
	</target>

   <target name="clean" description="Cleans the directory of build and executable files.">
      <echo message="Please also run 'ant restoreWin' or 'ant restoreUnix', depending on OS, before committing any changes!"/>
      <delete dir="${dist.dir}" failonerror="false"/>
	  <delete dir="${build.dir}" />
	  <delete file="${test.dir}/errorsStaticCheck.xml" failonerror="false"/>
   </target>
   
   <!-- Creates directories needed in preparation for build and subsequentl compilation -->
   <target name="prepare" depends="checkOS">
	  <mkdir dir="${dist.dir}" />
	  <mkdir dir="${build.dir}"/> 
   </target>

   <!--Note: need cpptasks.jar in the ant/lib folder on your machine! This jar file is in the lib directory in this repository. 
     		If more information neeeded see documentation at: http://ant-contrib.sourceforge.net/cpptasks/index.html   
	    After building, navigate to the dist directory created and you will find the executable to run the program.  -->
   <taskdef resource="cpptasks.tasks"/>
   <target name="build" depends="prepare" 
	  description="Compiles the program. Run this target first, then you will find the executable in the dist directory.">	  
	  <cpptasks:cc outtype="executable" subsystem="console" outfile="${dist.dir}/NeuroControlProgram" objdir="${build.dir}">
		<fileset dir="src/" includes="*.c"/>
	  </cpptasks:cc>	    
   </target>
       	
   <!-- This restores the original structure of the code after it was built on Unix. See setUnix target above. 
          To completely restore to original configuration run ant clean as well -->
   <target name="restoreUnix" description="Designed for Unix based systems to restore changes made for that system.">	
		<echo message="Please also run 'ant clean' before committing any changes!"/>
		<move file="src/usbSerialComm.c" tofile="src/usbSerialCommNoWin.c" />	
		<move file="src/usbSerialCommWin.c.txt" tofile="src/usbSerialCommWin.c"/>
		<move file="src/userInputWin.c.txt" tofile="src/userInputWin.c"/>
		<move file="src/userInput.c" tofile="src/userInputNoWin.c"/>
   </target>
   
    <!-- This restores the original structure of the code after it was built on Windows. See setWindows target above.
		   To completely restore to the original configuration run ant clean as well -->
    <target name="restoreWin" description="Designed for Windows based systems to restore changes made for that system.">	
		<echo message="Please also run 'ant clean' before committing any changes!"/>
		<move file="src/usbSerialComm.c" tofile="src/usbSerialCommWin.c"/>
		<move file="src/usbSerialCommNoWin.c.txt" tofile="src/usbSerialCommNoWin.c"/>		
		<move file="src/userInputNoWin.c.txt" tofile="src/userInputNoWin.c"/>
		<move file="src/userInput.c" tofile="src/userInputWin.c"/>	
   </target>   
   
    <!--Note: In order to static test, you will need cppcheck installed and available on the system or shell path. -->
	<!--		See documentation at: http://cppcheck.sourceforge.net/  -->
    <target name="static_test" 
		description="Uses cppcheck, cppcheck must be installed and path set correctly! &#xa;
	                 Cppcheck tests the source code and puts results into an xml file in the tests dir.">		
		<delete file="test/errorsStaticAnalysis.xml" failonerror="false"/>
		<exec executable="cmd" dir="${src.dir}" osfamily="windows" failonerror="true">			
			<arg value="/C" />
			<arg line="cppcheck --xml-version=2 --enable=all --inconclusive . 2&gt; errorsStaticAnalysis.xml" />
		</exec>
		<exec executable="/bin/sh" dir="${src.dir}" osfamily="unix" failonerror="true">			
			<arg value="-c"/>			
			<arg value="cppcheck --xml-version=2 --enable=all --inconclusive . 2&gt; errorsStaticAnalysis.xml" />			
		</exec>
		<!-- <move file="src/errorsStaticAnalysis.xml" todir="${test.dir}"/> -->
	</target>
	
	<!-- Warning: Some issues to still work out with dynamic test don't use. -->
	<target name="dynamic_test" depends="build" 
	        description="Uses Valgrind to dynamic test the code. Valgrind must be on the path and set correctly!&#xa;
			    Runs the dynamic test tool and prints out to the screen. ">
		<exec executable="/bin/sh" dir="dist/" osfamily="unix" failonerror="true" inputstring="x">			
		    <arg value="-c" />
		    <arg value="valgrind --tool=memcheck --leak-check=yes --show-reachable=yes --track-fds=yes ./NeuroControlProgram dynamicTest" />
		</exec>
	</target>
</project>
